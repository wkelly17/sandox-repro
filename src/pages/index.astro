---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
// import {VideoPlayer} from '../components/Video'
import { PlayerModuleImporter } from '../components/Wrapper';
import { VidAlt } from '../components/Vid2';

const playbackBaseUrl = "https://edge.api.brightcove.com/playback/v1";
const accountId = "6314154063001";
const playListId = "1745043212224883810";
const {playlist} = Astro.params;
const policyKey =
  "BCpkADawqM0bQiUyoSejARSlmKAaReqHw7sRy-4OFGmD8lb2ibVNF-d7H4wtYWIS8NMHOP-3IrfH1mVnUzhxQThtzvPBe-IUyk9EagJcJwWrbIBBCg1tsi8vJFv7_S6GGiTNhDwXFJfwF_W-";

let myHeaders = new Headers();
myHeaders.append("Accept", `application/json;pk=${policyKey}`);

let requestOptions = {
  method: "GET",
  headers: myHeaders,
};
const url = `${playbackBaseUrl}/accounts/${accountId}/playlists/ref:${playlist}?limit=300`;

// const response = await fetch(url, {
//   headers,
// });
const response = await fetch(url, requestOptions);
const data = await response.json();
// const playableSources = data.videos
//   .map((vid: any) => {
//     return vid.sources.filter((src: any) => {
//       return src.container && src.container == "MP4";
//     });
//   })
//   .flat();

const sortedVids = data.videos.sort((a, b) => {
  // Given this pattern: ASE-X-BENINSL_63-1JN_1Jean_01.mp4
  // match 0 is entire string
  // match 1 is the sort order, 63 ((?:\d)
  // match 2 is the book (1Jean)
  // match 3 is the chapter.
  // optional extension on the end.
  const pattern =
    /^.*?(\d{2})-(?:\d)?[A-Z]{2,3}_(\d?.+?)_([0-9]{2,3})(?:\..+)?$/;

  if (!a || !b) return;
  // /^.*?(\d{2})-(?:0|1)?[A-Z]{2,3}_\d?(.+?)_([0-9]{2,3})(?:\..+)?$/;
  const ref1 = a.reference_id?.toUpperCase();
  const ref2 = b.reference_id?.toUpperCase();
  const match = ref1.match(pattern);
  const match2 = ref2.match(pattern);
  if (!match || !match2) {
    // console.log("NO MATCHES");
    // console.log({ref1, ref2});
    return -1;
  }
  const sortA = Number(match[1]);
  const bookA = match[2];
  const chapterNumberA = Number(match[3]);
  const sortB = Number(match2[1]);
  const bookB = match2[2];
  const chapterNumberB = Number(match2[3]);
  a.book = a.book || bookA;
  b.book = b.book || bookB;

  let retVal;
  if (sortA == sortB) {
    retVal =
      chapterNumberA < chapterNumberB
        ? -1
        : chapterNumberA == chapterNumberB
        ? 0
        : 1;
  } else {
    retVal = sortA < sortB ? -1 : sortA == sortB ? 0 : 1;
  }

  // console.log({
  //   ref1,
  //   ref2,
  //   sortA,
  //   sortB,
  //   chapterNumberA,
  //   chapterNumberB,
  //   retVal,
  // });
  return retVal;
});

sortedVids.forEach((vid, idx) => {
  vid.originalIdx = idx;
  vid.slugName = vid.name
});
---

<Layout title="Welcome to Astro.">
	<main>
		<h1>Welcome to <span class="text-gradient">Astro</span></h1>
		<p class="instructions">
		This has video js loaded
		</p>
		<PlayerModuleImporter client:only="solid-js">
      {
        sortedVids.map((vid) => {
          return (
            <div class="w-1/3">
              <VidAlt client:only vid={vid} />
            </div>
          );
        })
      }
    </PlayerModuleImporter>
		<!-- <div class="aspect-square">
			<VideoPlayer client:only="solid-js"/>
		</div> -->
		<ul role="list" class="link-card-grid">
			<Card
				href="https://docs.astro.build/"
				title="Documentation"
				body="Learn how Astro works and explore the official API docs."
			/>
			<Card
				href="https://astro.build/integrations/"
				title="Integrations"
				body="Supercharge your project with new frameworks and libraries."
			/>
			<Card
				href="https://astro.build/themes/"
				title="Themes"
				body="Explore a galaxy of community-built starter themes."
			/>
			<Card
				href="https://astro.build/chat/"
				title="Community"
				body="Come say hi to our amazing Discord community. ❤️"
			/>
		</ul>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>

<!-- <script>

  videojs.registerPlugin("playlist", videojsPlaylistPlugin);

	videojs('vid1', {
		responsive: true,
        fluid: true,
        controls: true,
        playbackRates: [0.5, 1, 1.5, 2, 2.5, 3],
	})
</script> -->